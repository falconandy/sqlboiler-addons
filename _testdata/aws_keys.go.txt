// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AwsKey is an object representing the database table.
type AwsKey struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Key       string    `boil:"key" json:"key" toml:"key" yaml:"key"`
	Secret    string    `boil:"secret" json:"secret" toml:"secret" yaml:"secret"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *awsKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L awsKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AwsKeyColumns = struct {
	ID        string
	Name      string
	Key       string
	Secret    string
	CreatedAt string
}{
	ID:        "id",
	Name:      "name",
	Key:       "key",
	Secret:    "secret",
	CreatedAt: "created_at",
}

// Generated where

var AwsKeyWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	Key       whereHelperstring
	Secret    whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"aws_keys\".\"id\""},
	Name:      whereHelperstring{field: "\"aws_keys\".\"name\""},
	Key:       whereHelperstring{field: "\"aws_keys\".\"key\""},
	Secret:    whereHelperstring{field: "\"aws_keys\".\"secret\""},
	CreatedAt: whereHelpertime_Time{field: "\"aws_keys\".\"created_at\""},
}

// AwsKeyRels is where relationship names are stored.
var AwsKeyRels = struct {
	Hosts string
}{
	Hosts: "Hosts",
}

// awsKeyR is where relationships are stored.
type awsKeyR struct {
	Hosts HostSlice
}

// NewStruct creates a new relationship struct
func (*awsKeyR) NewStruct() *awsKeyR {
	return &awsKeyR{}
}

// awsKeyL is where Load methods for each relationship are stored.
type awsKeyL struct{}

var (
	awsKeyAllColumns            = []string{"id", "name", "key", "secret", "created_at"}
	awsKeyColumnsWithoutDefault = []string{"name", "key", "secret"}
	awsKeyColumnsWithDefault    = []string{"id", "created_at"}
	awsKeyPrimaryKeyColumns     = []string{"id"}
)

type (
	// AwsKeySlice is an alias for a slice of pointers to AwsKey.
	// This should generally be used opposed to []AwsKey.
	AwsKeySlice []*AwsKey
	// AwsKeyHook is the signature for custom AwsKey hook methods
	AwsKeyHook func(context.Context, boil.ContextExecutor, *AwsKey) error

	awsKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	awsKeyType                 = reflect.TypeOf(&AwsKey{})
	awsKeyMapping              = queries.MakeStructMapping(awsKeyType)
	awsKeyPrimaryKeyMapping, _ = queries.BindMapping(awsKeyType, awsKeyMapping, awsKeyPrimaryKeyColumns)
	awsKeyInsertCacheMut       sync.RWMutex
	awsKeyInsertCache          = make(map[string]insertCache)
	awsKeyUpdateCacheMut       sync.RWMutex
	awsKeyUpdateCache          = make(map[string]updateCache)
	awsKeyUpsertCacheMut       sync.RWMutex
	awsKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var awsKeyBeforeInsertHooks []AwsKeyHook
var awsKeyBeforeUpdateHooks []AwsKeyHook
var awsKeyBeforeDeleteHooks []AwsKeyHook
var awsKeyBeforeUpsertHooks []AwsKeyHook

var awsKeyAfterInsertHooks []AwsKeyHook
var awsKeyAfterSelectHooks []AwsKeyHook
var awsKeyAfterUpdateHooks []AwsKeyHook
var awsKeyAfterDeleteHooks []AwsKeyHook
var awsKeyAfterUpsertHooks []AwsKeyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AwsKey) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range awsKeyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AwsKey) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range awsKeyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AwsKey) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range awsKeyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AwsKey) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range awsKeyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AwsKey) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range awsKeyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AwsKey) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range awsKeyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AwsKey) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range awsKeyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AwsKey) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range awsKeyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AwsKey) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range awsKeyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAwsKeyHook registers your hook function for all future operations.
func AddAwsKeyHook(hookPoint boil.HookPoint, awsKeyHook AwsKeyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		awsKeyBeforeInsertHooks = append(awsKeyBeforeInsertHooks, awsKeyHook)
	case boil.BeforeUpdateHook:
		awsKeyBeforeUpdateHooks = append(awsKeyBeforeUpdateHooks, awsKeyHook)
	case boil.BeforeDeleteHook:
		awsKeyBeforeDeleteHooks = append(awsKeyBeforeDeleteHooks, awsKeyHook)
	case boil.BeforeUpsertHook:
		awsKeyBeforeUpsertHooks = append(awsKeyBeforeUpsertHooks, awsKeyHook)
	case boil.AfterInsertHook:
		awsKeyAfterInsertHooks = append(awsKeyAfterInsertHooks, awsKeyHook)
	case boil.AfterSelectHook:
		awsKeyAfterSelectHooks = append(awsKeyAfterSelectHooks, awsKeyHook)
	case boil.AfterUpdateHook:
		awsKeyAfterUpdateHooks = append(awsKeyAfterUpdateHooks, awsKeyHook)
	case boil.AfterDeleteHook:
		awsKeyAfterDeleteHooks = append(awsKeyAfterDeleteHooks, awsKeyHook)
	case boil.AfterUpsertHook:
		awsKeyAfterUpsertHooks = append(awsKeyAfterUpsertHooks, awsKeyHook)
	}
}

// One returns a single awsKey record from the query.
func (q awsKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AwsKey, error) {
	o := &AwsKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for aws_keys")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AwsKey records from the query.
func (q awsKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (AwsKeySlice, error) {
	var o []*AwsKey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AwsKey slice")
	}

	if len(awsKeyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AwsKey records in the query.
func (q awsKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count aws_keys rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q awsKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if aws_keys exists")
	}

	return count > 0, nil
}

// Hosts retrieves all the host's Hosts with an executor.
func (o *AwsKey) Hosts(mods ...qm.QueryMod) hostQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hosts\".\"aws_key_id\"=?", o.ID),
	)

	query := Hosts(queryMods...)
	queries.SetFrom(query.Query, "\"hosts\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"hosts\".*"})
	}

	return query
}

// LoadHosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (awsKeyL) LoadHosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAwsKey interface{}, mods queries.Applicator) error {
	var slice []*AwsKey
	var object *AwsKey

	if singular {
		object = maybeAwsKey.(*AwsKey)
	} else {
		slice = *maybeAwsKey.(*[]*AwsKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &awsKeyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &awsKeyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`hosts`), qm.WhereIn(`hosts.aws_key_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hosts")
	}

	var resultSlice []*Host
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hosts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hosts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hosts")
	}

	if len(hostAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Hosts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hostR{}
			}
			foreign.R.AwsKey = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AwsKeyID) {
				local.R.Hosts = append(local.R.Hosts, foreign)
				if foreign.R == nil {
					foreign.R = &hostR{}
				}
				foreign.R.AwsKey = local
				break
			}
		}
	}

	return nil
}

// AddHosts adds the given related objects to the existing relationships
// of the aws_key, optionally inserting them as new records.
// Appends related to o.R.Hosts.
// Sets related.R.AwsKey appropriately.
func (o *AwsKey) AddHosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Host) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AwsKeyID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hosts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"aws_key_id"}),
				strmangle.WhereClause("\"", "\"", 2, hostPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AwsKeyID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &awsKeyR{
			Hosts: related,
		}
	} else {
		o.R.Hosts = append(o.R.Hosts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hostR{
				AwsKey: o,
			}
		} else {
			rel.R.AwsKey = o
		}
	}
	return nil
}

// SetHosts removes all previously related items of the
// aws_key replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AwsKey's Hosts accordingly.
// Replaces o.R.Hosts with related.
// Sets related.R.AwsKey's Hosts accordingly.
func (o *AwsKey) SetHosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Host) error {
	query := "update \"hosts\" set \"aws_key_id\" = null where \"aws_key_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Hosts {
			queries.SetScanner(&rel.AwsKeyID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AwsKey = nil
		}

		o.R.Hosts = nil
	}
	return o.AddHosts(ctx, exec, insert, related...)
}

// RemoveHosts relationships from objects passed in.
// Removes related items from R.Hosts (uses pointer comparison, removal does not keep order)
// Sets related.R.AwsKey.
func (o *AwsKey) RemoveHosts(ctx context.Context, exec boil.ContextExecutor, related ...*Host) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AwsKeyID, nil)
		if rel.R != nil {
			rel.R.AwsKey = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("aws_key_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Hosts {
			if rel != ri {
				continue
			}

			ln := len(o.R.Hosts)
			if ln > 1 && i < ln-1 {
				o.R.Hosts[i] = o.R.Hosts[ln-1]
			}
			o.R.Hosts = o.R.Hosts[:ln-1]
			break
		}
	}

	return nil
}

// AwsKeys retrieves all the records using an executor.
func AwsKeys(mods ...qm.QueryMod) awsKeyQuery {
	mods = append(mods, qm.From("\"aws_keys\""))
	return awsKeyQuery{NewQuery(mods...)}
}

// FindAwsKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAwsKey(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AwsKey, error) {
	awsKeyObj := &AwsKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"aws_keys\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, awsKeyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from aws_keys")
	}

	return awsKeyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AwsKey) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no aws_keys provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(awsKeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	awsKeyInsertCacheMut.RLock()
	cache, cached := awsKeyInsertCache[key]
	awsKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			awsKeyAllColumns,
			awsKeyColumnsWithDefault,
			awsKeyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(awsKeyType, awsKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(awsKeyType, awsKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"aws_keys\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"aws_keys\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into aws_keys")
	}

	if !cached {
		awsKeyInsertCacheMut.Lock()
		awsKeyInsertCache[key] = cache
		awsKeyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AwsKey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AwsKey) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	awsKeyUpdateCacheMut.RLock()
	cache, cached := awsKeyUpdateCache[key]
	awsKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			awsKeyAllColumns,
			awsKeyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update aws_keys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"aws_keys\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, awsKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(awsKeyType, awsKeyMapping, append(wl, awsKeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update aws_keys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for aws_keys")
	}

	if !cached {
		awsKeyUpdateCacheMut.Lock()
		awsKeyUpdateCache[key] = cache
		awsKeyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q awsKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for aws_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for aws_keys")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AwsKeySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), awsKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"aws_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, awsKeyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in awsKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all awsKey")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AwsKey) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no aws_keys provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(awsKeyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	awsKeyUpsertCacheMut.RLock()
	cache, cached := awsKeyUpsertCache[key]
	awsKeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			awsKeyAllColumns,
			awsKeyColumnsWithDefault,
			awsKeyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			awsKeyAllColumns,
			awsKeyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert aws_keys, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(awsKeyPrimaryKeyColumns))
			copy(conflict, awsKeyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"aws_keys\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(awsKeyType, awsKeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(awsKeyType, awsKeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert aws_keys")
	}

	if !cached {
		awsKeyUpsertCacheMut.Lock()
		awsKeyUpsertCache[key] = cache
		awsKeyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AwsKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AwsKey) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AwsKey provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), awsKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"aws_keys\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from aws_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for aws_keys")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q awsKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no awsKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aws_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aws_keys")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AwsKeySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(awsKeyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), awsKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"aws_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, awsKeyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from awsKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aws_keys")
	}

	if len(awsKeyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AwsKey) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAwsKey(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AwsKeySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AwsKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), awsKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"aws_keys\".* FROM \"aws_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, awsKeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AwsKeySlice")
	}

	*o = slice

	return nil
}

// AwsKeyExists checks if the AwsKey row exists.
func AwsKeyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"aws_keys\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if aws_keys exists")
	}

	return exists, nil
}

func (o *AwsKey) E() *AwsKeyE {
	return &AwsKeyE{S: o}
}

func AwsKeyEditor() *AwsKeyE {
	return &AwsKeyE{S: &AwsKey{}}
}

type AwsKeyE struct {
	S       *AwsKey
	columns []string
}

func (e *AwsKeyE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	return e.S.Insert(ctx, exec, boil.Whitelist(e.columns...))
}

func (e *AwsKeyE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	return e.S.Update(ctx, exec, boil.Whitelist(e.columns...))
}

func (e *AwsKeyE) ID(id int) *AwsKeyE {
	e.S.ID = id
	e.columns = append(e.columns, AwsKeyColumns.ID)
	return e
}

func (e *AwsKeyE) Name(name string) *AwsKeyE {
	e.S.Name = name
	e.columns = append(e.columns, AwsKeyColumns.Name)
	return e
}

func (e *AwsKeyE) Key(key string) *AwsKeyE {
	e.S.Key = key
	e.columns = append(e.columns, AwsKeyColumns.Key)
	return e
}

func (e *AwsKeyE) Secret(secret string) *AwsKeyE {
	e.S.Secret = secret
	e.columns = append(e.columns, AwsKeyColumns.Secret)
	return e
}

func (e *AwsKeyE) CreatedAt(createdAt time.Time) *AwsKeyE {
	e.S.CreatedAt = createdAt
	e.columns = append(e.columns, AwsKeyColumns.CreatedAt)
	return e
}
