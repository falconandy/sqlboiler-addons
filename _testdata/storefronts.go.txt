// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Storefront is an object representing the database table.
type Storefront struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *storefrontR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storefrontL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StorefrontColumns = struct {
	ID        string
	Title     string
	CreatedAt string
}{
	ID:        "id",
	Title:     "title",
	CreatedAt: "created_at",
}

// Generated where

var StorefrontWhere = struct {
	ID        whereHelperint
	Title     whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"storefronts\".\"id\""},
	Title:     whereHelperstring{field: "\"storefronts\".\"title\""},
	CreatedAt: whereHelpertime_Time{field: "\"storefronts\".\"created_at\""},
}

// StorefrontRels is where relationship names are stored.
var StorefrontRels = struct {
	StorefrontApps string
}{
	StorefrontApps: "StorefrontApps",
}

// storefrontR is where relationships are stored.
type storefrontR struct {
	StorefrontApps StorefrontAppSlice
}

// NewStruct creates a new relationship struct
func (*storefrontR) NewStruct() *storefrontR {
	return &storefrontR{}
}

// storefrontL is where Load methods for each relationship are stored.
type storefrontL struct{}

var (
	storefrontAllColumns            = []string{"id", "title", "created_at"}
	storefrontColumnsWithoutDefault = []string{"title"}
	storefrontColumnsWithDefault    = []string{"id", "created_at"}
	storefrontPrimaryKeyColumns     = []string{"id"}
)

type (
	// StorefrontSlice is an alias for a slice of pointers to Storefront.
	// This should generally be used opposed to []Storefront.
	StorefrontSlice []*Storefront
	// StorefrontHook is the signature for custom Storefront hook methods
	StorefrontHook func(context.Context, boil.ContextExecutor, *Storefront) error

	storefrontQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storefrontType                 = reflect.TypeOf(&Storefront{})
	storefrontMapping              = queries.MakeStructMapping(storefrontType)
	storefrontPrimaryKeyMapping, _ = queries.BindMapping(storefrontType, storefrontMapping, storefrontPrimaryKeyColumns)
	storefrontInsertCacheMut       sync.RWMutex
	storefrontInsertCache          = make(map[string]insertCache)
	storefrontUpdateCacheMut       sync.RWMutex
	storefrontUpdateCache          = make(map[string]updateCache)
	storefrontUpsertCacheMut       sync.RWMutex
	storefrontUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storefrontBeforeInsertHooks []StorefrontHook
var storefrontBeforeUpdateHooks []StorefrontHook
var storefrontBeforeDeleteHooks []StorefrontHook
var storefrontBeforeUpsertHooks []StorefrontHook

var storefrontAfterInsertHooks []StorefrontHook
var storefrontAfterSelectHooks []StorefrontHook
var storefrontAfterUpdateHooks []StorefrontHook
var storefrontAfterDeleteHooks []StorefrontHook
var storefrontAfterUpsertHooks []StorefrontHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Storefront) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Storefront) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Storefront) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Storefront) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Storefront) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Storefront) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Storefront) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Storefront) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Storefront) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStorefrontHook registers your hook function for all future operations.
func AddStorefrontHook(hookPoint boil.HookPoint, storefrontHook StorefrontHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		storefrontBeforeInsertHooks = append(storefrontBeforeInsertHooks, storefrontHook)
	case boil.BeforeUpdateHook:
		storefrontBeforeUpdateHooks = append(storefrontBeforeUpdateHooks, storefrontHook)
	case boil.BeforeDeleteHook:
		storefrontBeforeDeleteHooks = append(storefrontBeforeDeleteHooks, storefrontHook)
	case boil.BeforeUpsertHook:
		storefrontBeforeUpsertHooks = append(storefrontBeforeUpsertHooks, storefrontHook)
	case boil.AfterInsertHook:
		storefrontAfterInsertHooks = append(storefrontAfterInsertHooks, storefrontHook)
	case boil.AfterSelectHook:
		storefrontAfterSelectHooks = append(storefrontAfterSelectHooks, storefrontHook)
	case boil.AfterUpdateHook:
		storefrontAfterUpdateHooks = append(storefrontAfterUpdateHooks, storefrontHook)
	case boil.AfterDeleteHook:
		storefrontAfterDeleteHooks = append(storefrontAfterDeleteHooks, storefrontHook)
	case boil.AfterUpsertHook:
		storefrontAfterUpsertHooks = append(storefrontAfterUpsertHooks, storefrontHook)
	}
}

// One returns a single storefront record from the query.
func (q storefrontQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Storefront, error) {
	o := &Storefront{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for storefronts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Storefront records from the query.
func (q storefrontQuery) All(ctx context.Context, exec boil.ContextExecutor) (StorefrontSlice, error) {
	var o []*Storefront

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Storefront slice")
	}

	if len(storefrontAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Storefront records in the query.
func (q storefrontQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count storefronts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storefrontQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if storefronts exists")
	}

	return count > 0, nil
}

// StorefrontApps retrieves all the storefront_app's StorefrontApps with an executor.
func (o *Storefront) StorefrontApps(mods ...qm.QueryMod) storefrontAppQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"storefront_apps\".\"storefront_id\"=?", o.ID),
	)

	query := StorefrontApps(queryMods...)
	queries.SetFrom(query.Query, "\"storefront_apps\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"storefront_apps\".*"})
	}

	return query
}

// LoadStorefrontApps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storefrontL) LoadStorefrontApps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStorefront interface{}, mods queries.Applicator) error {
	var slice []*Storefront
	var object *Storefront

	if singular {
		object = maybeStorefront.(*Storefront)
	} else {
		slice = *maybeStorefront.(*[]*Storefront)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storefrontR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storefrontR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`storefront_apps`), qm.WhereIn(`storefront_apps.storefront_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load storefront_apps")
	}

	var resultSlice []*StorefrontApp
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice storefront_apps")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on storefront_apps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for storefront_apps")
	}

	if len(storefrontAppAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StorefrontApps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storefrontAppR{}
			}
			foreign.R.Storefront = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StorefrontID {
				local.R.StorefrontApps = append(local.R.StorefrontApps, foreign)
				if foreign.R == nil {
					foreign.R = &storefrontAppR{}
				}
				foreign.R.Storefront = local
				break
			}
		}
	}

	return nil
}

// AddStorefrontApps adds the given related objects to the existing relationships
// of the storefront, optionally inserting them as new records.
// Appends related to o.R.StorefrontApps.
// Sets related.R.Storefront appropriately.
func (o *Storefront) AddStorefrontApps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StorefrontApp) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StorefrontID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"storefront_apps\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"storefront_id"}),
				strmangle.WhereClause("\"", "\"", 2, storefrontAppPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StorefrontID = o.ID
		}
	}

	if o.R == nil {
		o.R = &storefrontR{
			StorefrontApps: related,
		}
	} else {
		o.R.StorefrontApps = append(o.R.StorefrontApps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storefrontAppR{
				Storefront: o,
			}
		} else {
			rel.R.Storefront = o
		}
	}
	return nil
}

// Storefronts retrieves all the records using an executor.
func Storefronts(mods ...qm.QueryMod) storefrontQuery {
	mods = append(mods, qm.From("\"storefronts\""))
	return storefrontQuery{NewQuery(mods...)}
}

// FindStorefront retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStorefront(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Storefront, error) {
	storefrontObj := &Storefront{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"storefronts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, storefrontObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from storefronts")
	}

	return storefrontObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Storefront) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no storefronts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storefrontColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storefrontInsertCacheMut.RLock()
	cache, cached := storefrontInsertCache[key]
	storefrontInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storefrontAllColumns,
			storefrontColumnsWithDefault,
			storefrontColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storefrontType, storefrontMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storefrontType, storefrontMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"storefronts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"storefronts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into storefronts")
	}

	if !cached {
		storefrontInsertCacheMut.Lock()
		storefrontInsertCache[key] = cache
		storefrontInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Storefront.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Storefront) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storefrontUpdateCacheMut.RLock()
	cache, cached := storefrontUpdateCache[key]
	storefrontUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storefrontAllColumns,
			storefrontPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update storefronts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"storefronts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storefrontPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storefrontType, storefrontMapping, append(wl, storefrontPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update storefronts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for storefronts")
	}

	if !cached {
		storefrontUpdateCacheMut.Lock()
		storefrontUpdateCache[key] = cache
		storefrontUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storefrontQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for storefronts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for storefronts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StorefrontSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"storefronts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storefrontPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in storefront slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all storefront")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Storefront) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no storefronts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storefrontColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storefrontUpsertCacheMut.RLock()
	cache, cached := storefrontUpsertCache[key]
	storefrontUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storefrontAllColumns,
			storefrontColumnsWithDefault,
			storefrontColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			storefrontAllColumns,
			storefrontPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert storefronts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storefrontPrimaryKeyColumns))
			copy(conflict, storefrontPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"storefronts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storefrontType, storefrontMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storefrontType, storefrontMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert storefronts")
	}

	if !cached {
		storefrontUpsertCacheMut.Lock()
		storefrontUpsertCache[key] = cache
		storefrontUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Storefront record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Storefront) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Storefront provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storefrontPrimaryKeyMapping)
	sql := "DELETE FROM \"storefronts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from storefronts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for storefronts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storefrontQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no storefrontQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storefronts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for storefronts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StorefrontSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storefrontBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"storefronts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storefrontPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storefront slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for storefronts")
	}

	if len(storefrontAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Storefront) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStorefront(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StorefrontSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StorefrontSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"storefronts\".* FROM \"storefronts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storefrontPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StorefrontSlice")
	}

	*o = slice

	return nil
}

// StorefrontExists checks if the Storefront row exists.
func StorefrontExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"storefronts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if storefronts exists")
	}

	return exists, nil
}

func (o *Storefront) E() *StorefrontE {
	return &StorefrontE{S: o}
}

func StorefrontEditor() *StorefrontE {
	return &StorefrontE{S: &Storefront{}}
}

type StorefrontE struct {
	S       *Storefront
	columns []string
}

func (e *StorefrontE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	return e.S.Insert(ctx, exec, boil.Whitelist(e.columns...))
}

func (e *StorefrontE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	return e.S.Update(ctx, exec, boil.Whitelist(e.columns...))
}

func (e *StorefrontE) ID(id int) *StorefrontE {
	e.S.ID = id
	e.columns = append(e.columns, StorefrontColumns.ID)
	return e
}

func (e *StorefrontE) Title(title string) *StorefrontE {
	e.S.Title = title
	e.columns = append(e.columns, StorefrontColumns.Title)
	return e
}

func (e *StorefrontE) CreatedAt(createdAt time.Time) *StorefrontE {
	e.S.CreatedAt = createdAt
	e.columns = append(e.columns, StorefrontColumns.CreatedAt)
	return e
}
