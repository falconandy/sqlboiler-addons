// Code generated by SQLBoiler addon. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"time"

	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
)

type editor struct {
	columns []string
}

func (e *editor) addColumn(column string) {
	for _, col := range e.columns {
		if col == column {
			return
		}
	}
	e.columns = append(e.columns, column)
}

type APIKeyE struct {
	editor
	S *APIKey
}

func (o *APIKey) E() *APIKeyE {
	return &APIKeyE{S: o}
}

func APIKeyEditor(o **APIKey) *APIKeyE {
	var s *APIKey
	if o == nil || *o == nil {
		s = &APIKey{}
		if o != nil {
			*o = s
		}
	} else {
		s = *o
	}

	return &APIKeyE{S: s}
}

func (e *APIKeyE) SetID(id int) *APIKeyE {
	e.S.ID = id
	e.addColumn(APIKeyColumns.ID)
	return e
}

func (e *APIKeyE) SetKey(key string) *APIKeyE {
	e.S.Key = key
	e.addColumn(APIKeyColumns.Key)
	return e
}

func (e *APIKeyE) SetSecret(secret string) *APIKeyE {
	e.S.Secret = secret
	e.addColumn(APIKeyColumns.Secret)
	return e
}

func (e *APIKeyE) SetComment(comment null.String) *APIKeyE {
	e.S.Comment = comment
	e.addColumn(APIKeyColumns.Comment)
	return e
}

func (e *APIKeyE) SetDisabled(disabled bool) *APIKeyE {
	e.S.Disabled = disabled
	e.addColumn(APIKeyColumns.Disabled)
	return e
}

func (e *APIKeyE) SetCreatedAt(createdAt time.Time) *APIKeyE {
	e.S.CreatedAt = createdAt
	e.addColumn(APIKeyColumns.CreatedAt)
	return e
}

// Insert a single record using an executor.
func (e *APIKeyE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	columns := e.columns
	e.columns = nil
	return e.S.Insert(ctx, exec, boil.Greylist(columns...))
}

// Update uses an executor to update the APIKey.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (e *APIKeyE) Update(exec boil.ContextExecutor) (int64, error) {
	columns := e.columns
	e.columns = nil
	return e.S.Update(exec, boil.Whitelist(columns...))
}

type AwsKeyE struct {
	editor
	S *AwsKey
}

func (o *AwsKey) E() *AwsKeyE {
	return &AwsKeyE{S: o}
}

func AwsKeyEditor(o **AwsKey) *AwsKeyE {
	var s *AwsKey
	if o == nil || *o == nil {
		s = &AwsKey{}
		if o != nil {
			*o = s
		}
	} else {
		s = *o
	}

	return &AwsKeyE{S: s}
}

func (e *AwsKeyE) SetID(id int) *AwsKeyE {
	e.S.ID = id
	e.addColumn(AwsKeyColumns.ID)
	return e
}

func (e *AwsKeyE) SetName(name string) *AwsKeyE {
	e.S.Name = name
	e.addColumn(AwsKeyColumns.Name)
	return e
}

func (e *AwsKeyE) SetKey(key string) *AwsKeyE {
	e.S.Key = key
	e.addColumn(AwsKeyColumns.Key)
	return e
}

func (e *AwsKeyE) SetSecret(secret string) *AwsKeyE {
	e.S.Secret = secret
	e.addColumn(AwsKeyColumns.Secret)
	return e
}

func (e *AwsKeyE) SetCreatedAt(createdAt time.Time) *AwsKeyE {
	e.S.CreatedAt = createdAt
	e.addColumn(AwsKeyColumns.CreatedAt)
	return e
}

// Insert a single record using an executor.
func (e *AwsKeyE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	columns := e.columns
	e.columns = nil
	return e.S.Insert(ctx, exec, boil.Greylist(columns...))
}

// Update uses an executor to update the AwsKey.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (e *AwsKeyE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	columns := e.columns
	e.columns = nil
	return e.S.Update(ctx, exec, boil.Whitelist(columns...))
}

type ConfigTemplateE struct {
	editor
	S *ConfigTemplate
}

func (o *ConfigTemplate) E() *ConfigTemplateE {
	return &ConfigTemplateE{S: o}
}

func ConfigTemplateEditor(o **ConfigTemplate) *ConfigTemplateE {
	var s *ConfigTemplate
	if o == nil || *o == nil {
		s = &ConfigTemplate{}
		if o != nil {
			*o = s
		}
	} else {
		s = *o
	}

	return &ConfigTemplateE{S: s}
}

func (e *ConfigTemplateE) SetID(id int) *ConfigTemplateE {
	e.S.ID = id
	e.addColumn(ConfigTemplateColumns.ID)
	return e
}

func (e *ConfigTemplateE) SetTitle(title string) *ConfigTemplateE {
	e.S.Title = title
	e.addColumn(ConfigTemplateColumns.Title)
	return e
}

func (e *ConfigTemplateE) SetConfig(config string) *ConfigTemplateE {
	e.S.Config = config
	e.addColumn(ConfigTemplateColumns.Config)
	return e
}

func (e *ConfigTemplateE) SetCreatedAt(createdAt time.Time) *ConfigTemplateE {
	e.S.CreatedAt = createdAt
	e.addColumn(ConfigTemplateColumns.CreatedAt)
	return e
}

// Insert a single record using an executor.
func (e *ConfigTemplateE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	columns := e.columns
	e.columns = nil
	return e.S.Insert(ctx, exec, boil.Greylist(columns...))
}

// Update uses an executor to update the ConfigTemplate.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (e *ConfigTemplateE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	columns := e.columns
	e.columns = nil
	return e.S.Update(ctx, exec, boil.Whitelist(columns...))
}

type EngineSettingE struct {
	editor
	S *EngineSetting
}

func (o *EngineSetting) E() *EngineSettingE {
	return &EngineSettingE{S: o}
}

func EngineSettingEditor(o **EngineSetting) *EngineSettingE {
	var s *EngineSetting
	if o == nil || *o == nil {
		s = &EngineSetting{}
		if o != nil {
			*o = s
		}
	} else {
		s = *o
	}

	return &EngineSettingE{S: s}
}

func (e *EngineSettingE) SetID(id int) *EngineSettingE {
	e.S.ID = id
	e.addColumn(EngineSettingColumns.ID)
	return e
}

func (e *EngineSettingE) SetTitle(title string) *EngineSettingE {
	e.S.Title = title
	e.addColumn(EngineSettingColumns.Title)
	return e
}

func (e *EngineSettingE) SetConfig(config string) *EngineSettingE {
	e.S.Config = config
	e.addColumn(EngineSettingColumns.Config)
	return e
}

func (e *EngineSettingE) SetCreatedAt(createdAt time.Time) *EngineSettingE {
	e.S.CreatedAt = createdAt
	e.addColumn(EngineSettingColumns.CreatedAt)
	return e
}

// Insert a single record using an executor.
func (e *EngineSettingE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	columns := e.columns
	e.columns = nil
	return e.S.Insert(ctx, exec, boil.Greylist(columns...))
}

// Update uses an executor to update the EngineSetting.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (e *EngineSettingE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	columns := e.columns
	e.columns = nil
	return e.S.Update(ctx, exec, boil.Whitelist(columns...))
}

type HostE struct {
	editor
	S *Host
}

func (o *Host) E() *HostE {
	return &HostE{S: o}
}

func HostEditor(o **Host) *HostE {
	var s *Host
	if o == nil || *o == nil {
		s = &Host{}
		if o != nil {
			*o = s
		}
	} else {
		s = *o
	}

	return &HostE{S: s}
}

func (e *HostE) SetID(id int) *HostE {
	e.S.ID = id
	e.addColumn(HostColumns.ID)
	return e
}

func (e *HostE) SetHost(host string) *HostE {
	e.S.Host = host
	e.addColumn(HostColumns.Host)
	return e
}

func (e *HostE) SetTag(tag null.String) *HostE {
	e.S.Tag = tag
	e.addColumn(HostColumns.Tag)
	return e
}

func (e *HostE) SetUser(user string) *HostE {
	e.S.User = user
	e.addColumn(HostColumns.User)
	return e
}

func (e *HostE) SetPassword(password null.String) *HostE {
	e.S.Password = password
	e.addColumn(HostColumns.Password)
	return e
}

func (e *HostE) SetPrivateKey(privateKey null.String) *HostE {
	e.S.PrivateKey = privateKey
	e.addColumn(HostColumns.PrivateKey)
	return e
}

func (e *HostE) SetCreatedAt(createdAt time.Time) *HostE {
	e.S.CreatedAt = createdAt
	e.addColumn(HostColumns.CreatedAt)
	return e
}

func (e *HostE) SetBaseDir(baseDir null.String) *HostE {
	e.S.BaseDir = baseDir
	e.addColumn(HostColumns.BaseDir)
	return e
}

func (e *HostE) SetAwsKeyID(awsKeyID null.Int) *HostE {
	e.S.AwsKeyID = awsKeyID
	e.addColumn(HostColumns.AwsKeyID)
	return e
}

func (e *HostE) SetAwsRegion(awsRegion null.String) *HostE {
	e.S.AwsRegion = awsRegion
	e.addColumn(HostColumns.AwsRegion)
	return e
}

func (e *HostE) SetAwsInstanceID(awsInstanceID null.String) *HostE {
	e.S.AwsInstanceID = awsInstanceID
	e.addColumn(HostColumns.AwsInstanceID)
	return e
}

// Insert a single record using an executor.
func (e *HostE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	columns := e.columns
	e.columns = nil
	return e.S.Insert(ctx, exec, boil.Greylist(columns...))
}

// Update uses an executor to update the Host.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (e *HostE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	columns := e.columns
	e.columns = nil
	return e.S.Update(ctx, exec, boil.Whitelist(columns...))
}

type StorefrontAppE struct {
	editor
	S *StorefrontApp
}

func (o *StorefrontApp) E() *StorefrontAppE {
	return &StorefrontAppE{S: o}
}

func StorefrontAppEditor(o **StorefrontApp) *StorefrontAppE {
	var s *StorefrontApp
	if o == nil || *o == nil {
		s = &StorefrontApp{}
		if o != nil {
			*o = s
		}
	} else {
		s = *o
	}

	return &StorefrontAppE{S: s}
}

func (e *StorefrontAppE) SetID(id int) *StorefrontAppE {
	e.S.ID = id
	e.addColumn(StorefrontAppColumns.ID)
	return e
}

func (e *StorefrontAppE) SetStorefrontID(storefrontID int) *StorefrontAppE {
	e.S.StorefrontID = storefrontID
	e.addColumn(StorefrontAppColumns.StorefrontID)
	return e
}

func (e *StorefrontAppE) SetCategory(category string) *StorefrontAppE {
	e.S.Category = category
	e.addColumn(StorefrontAppColumns.Category)
	return e
}

func (e *StorefrontAppE) SetTitle(title string) *StorefrontAppE {
	e.S.Title = title
	e.addColumn(StorefrontAppColumns.Title)
	return e
}

func (e *StorefrontAppE) SetDescription(description string) *StorefrontAppE {
	e.S.Description = description
	e.addColumn(StorefrontAppColumns.Description)
	return e
}

func (e *StorefrontAppE) SetVisible(visible bool) *StorefrontAppE {
	e.S.Visible = visible
	e.addColumn(StorefrontAppColumns.Visible)
	return e
}

func (e *StorefrontAppE) SetImageBody(imageBody null.Bytes) *StorefrontAppE {
	e.S.ImageBody = imageBody
	e.addColumn(StorefrontAppColumns.ImageBody)
	return e
}

func (e *StorefrontAppE) SetImageURL(imageURL string) *StorefrontAppE {
	e.S.ImageURL = imageURL
	e.addColumn(StorefrontAppColumns.ImageURL)
	return e
}

func (e *StorefrontAppE) SetAppURL(appURL string) *StorefrontAppE {
	e.S.AppURL = appURL
	e.addColumn(StorefrontAppColumns.AppURL)
	return e
}

func (e *StorefrontAppE) SetSortIndex(sortIndex int) *StorefrontAppE {
	e.S.SortIndex = sortIndex
	e.addColumn(StorefrontAppColumns.SortIndex)
	return e
}

func (e *StorefrontAppE) SetCreatedAt(createdAt time.Time) *StorefrontAppE {
	e.S.CreatedAt = createdAt
	e.addColumn(StorefrontAppColumns.CreatedAt)
	return e
}

// Insert a single record using an executor.
func (e *StorefrontAppE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	columns := e.columns
	e.columns = nil
	return e.S.Insert(ctx, exec, boil.Greylist(columns...))
}

// Update uses an executor to update the StorefrontApp.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (e *StorefrontAppE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	columns := e.columns
	e.columns = nil
	return e.S.Update(ctx, exec, boil.Whitelist(columns...))
}

type StorefrontE struct {
	editor
	S *Storefront
}

func (o *Storefront) E() *StorefrontE {
	return &StorefrontE{S: o}
}

func StorefrontEditor(o **Storefront) *StorefrontE {
	var s *Storefront
	if o == nil || *o == nil {
		s = &Storefront{}
		if o != nil {
			*o = s
		}
	} else {
		s = *o
	}

	return &StorefrontE{S: s}
}

func (e *StorefrontE) SetID(id int) *StorefrontE {
	e.S.ID = id
	e.addColumn(StorefrontColumns.ID)
	return e
}

func (e *StorefrontE) SetTitle(title string) *StorefrontE {
	e.S.Title = title
	e.addColumn(StorefrontColumns.Title)
	return e
}

func (e *StorefrontE) SetCreatedAt(createdAt time.Time) *StorefrontE {
	e.S.CreatedAt = createdAt
	e.addColumn(StorefrontColumns.CreatedAt)
	return e
}

// Insert a single record using an executor.
func (e *StorefrontE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	columns := e.columns
	e.columns = nil
	return e.S.Insert(ctx, exec, boil.Greylist(columns...))
}

// Update uses an executor to update the Storefront.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (e *StorefrontE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	columns := e.columns
	e.columns = nil
	return e.S.Update(ctx, exec, boil.Whitelist(columns...))
}

type UserE struct {
	editor
	S *User
}

func (o *User) E() *UserE {
	return &UserE{S: o}
}

func UserEditor(o **User) *UserE {
	var s *User
	if o == nil || *o == nil {
		s = &User{}
		if o != nil {
			*o = s
		}
	} else {
		s = *o
	}

	return &UserE{S: s}
}

func (e *UserE) SetID(id string) *UserE {
	e.S.ID = id
	e.addColumn(UserColumns.ID)
	return e
}

func (e *UserE) SetLogin(login string) *UserE {
	e.S.Login = login
	e.addColumn(UserColumns.Login)
	return e
}

func (e *UserE) SetDisplayName(displayName string) *UserE {
	e.S.DisplayName = displayName
	e.addColumn(UserColumns.DisplayName)
	return e
}

func (e *UserE) SetEmail(email string) *UserE {
	e.S.Email = email
	e.addColumn(UserColumns.Email)
	return e
}

func (e *UserE) SetStatus(status string) *UserE {
	e.S.Status = status
	e.addColumn(UserColumns.Status)
	return e
}

func (e *UserE) SetCreatedAt(createdAt time.Time) *UserE {
	e.S.CreatedAt = createdAt
	e.addColumn(UserColumns.CreatedAt)
	return e
}

// Insert a single record using an executor.
func (e *UserE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	columns := e.columns
	e.columns = nil
	return e.S.Insert(ctx, exec, boil.Greylist(columns...))
}

// Update uses an executor to update the User.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (e *UserE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	columns := e.columns
	e.columns = nil
	return e.S.Update(ctx, exec, boil.Whitelist(columns...))
}
