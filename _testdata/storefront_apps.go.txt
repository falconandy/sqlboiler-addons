// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// StorefrontApp is an object representing the database table.
type StorefrontApp struct {
	ID           int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	StorefrontID int        `boil:"storefront_id" json:"storefront_id" toml:"storefront_id" yaml:"storefront_id"`
	Category     string     `boil:"category" json:"category" toml:"category" yaml:"category"`
	Title        string     `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description  string     `boil:"description" json:"description" toml:"description" yaml:"description"`
	Visible      bool       `boil:"visible" json:"visible" toml:"visible" yaml:"visible"`
	ImageBody    null.Bytes `boil:"image_body" json:"image_body,omitempty" toml:"image_body" yaml:"image_body,omitempty"`
	ImageURL     string     `boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	AppURL       string     `boil:"app_url" json:"app_url" toml:"app_url" yaml:"app_url"`
	SortIndex    int        `boil:"sort_index" json:"sort_index" toml:"sort_index" yaml:"sort_index"`
	CreatedAt    time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *storefrontAppR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storefrontAppL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StorefrontAppColumns = struct {
	ID           string
	StorefrontID string
	Category     string
	Title        string
	Description  string
	Visible      string
	ImageBody    string
	ImageURL     string
	AppURL       string
	SortIndex    string
	CreatedAt    string
}{
	ID:           "id",
	StorefrontID: "storefront_id",
	Category:     "category",
	Title:        "title",
	Description:  "description",
	Visible:      "visible",
	ImageBody:    "image_body",
	ImageURL:     "image_url",
	AppURL:       "app_url",
	SortIndex:    "sort_index",
	CreatedAt:    "created_at",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var StorefrontAppWhere = struct {
	ID           whereHelperint
	StorefrontID whereHelperint
	Category     whereHelperstring
	Title        whereHelperstring
	Description  whereHelperstring
	Visible      whereHelperbool
	ImageBody    whereHelpernull_Bytes
	ImageURL     whereHelperstring
	AppURL       whereHelperstring
	SortIndex    whereHelperint
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"storefront_apps\".\"id\""},
	StorefrontID: whereHelperint{field: "\"storefront_apps\".\"storefront_id\""},
	Category:     whereHelperstring{field: "\"storefront_apps\".\"category\""},
	Title:        whereHelperstring{field: "\"storefront_apps\".\"title\""},
	Description:  whereHelperstring{field: "\"storefront_apps\".\"description\""},
	Visible:      whereHelperbool{field: "\"storefront_apps\".\"visible\""},
	ImageBody:    whereHelpernull_Bytes{field: "\"storefront_apps\".\"image_body\""},
	ImageURL:     whereHelperstring{field: "\"storefront_apps\".\"image_url\""},
	AppURL:       whereHelperstring{field: "\"storefront_apps\".\"app_url\""},
	SortIndex:    whereHelperint{field: "\"storefront_apps\".\"sort_index\""},
	CreatedAt:    whereHelpertime_Time{field: "\"storefront_apps\".\"created_at\""},
}

// StorefrontAppRels is where relationship names are stored.
var StorefrontAppRels = struct {
	Storefront string
}{
	Storefront: "Storefront",
}

// storefrontAppR is where relationships are stored.
type storefrontAppR struct {
	Storefront *Storefront
}

// NewStruct creates a new relationship struct
func (*storefrontAppR) NewStruct() *storefrontAppR {
	return &storefrontAppR{}
}

// storefrontAppL is where Load methods for each relationship are stored.
type storefrontAppL struct{}

var (
	storefrontAppAllColumns            = []string{"id", "storefront_id", "category", "title", "description", "visible", "image_body", "image_url", "app_url", "sort_index", "created_at"}
	storefrontAppColumnsWithoutDefault = []string{"storefront_id", "category", "title", "description", "image_body", "image_url", "app_url", "sort_index"}
	storefrontAppColumnsWithDefault    = []string{"id", "visible", "created_at"}
	storefrontAppPrimaryKeyColumns     = []string{"id"}
)

type (
	// StorefrontAppSlice is an alias for a slice of pointers to StorefrontApp.
	// This should generally be used opposed to []StorefrontApp.
	StorefrontAppSlice []*StorefrontApp
	// StorefrontAppHook is the signature for custom StorefrontApp hook methods
	StorefrontAppHook func(context.Context, boil.ContextExecutor, *StorefrontApp) error

	storefrontAppQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storefrontAppType                 = reflect.TypeOf(&StorefrontApp{})
	storefrontAppMapping              = queries.MakeStructMapping(storefrontAppType)
	storefrontAppPrimaryKeyMapping, _ = queries.BindMapping(storefrontAppType, storefrontAppMapping, storefrontAppPrimaryKeyColumns)
	storefrontAppInsertCacheMut       sync.RWMutex
	storefrontAppInsertCache          = make(map[string]insertCache)
	storefrontAppUpdateCacheMut       sync.RWMutex
	storefrontAppUpdateCache          = make(map[string]updateCache)
	storefrontAppUpsertCacheMut       sync.RWMutex
	storefrontAppUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storefrontAppBeforeInsertHooks []StorefrontAppHook
var storefrontAppBeforeUpdateHooks []StorefrontAppHook
var storefrontAppBeforeDeleteHooks []StorefrontAppHook
var storefrontAppBeforeUpsertHooks []StorefrontAppHook

var storefrontAppAfterInsertHooks []StorefrontAppHook
var storefrontAppAfterSelectHooks []StorefrontAppHook
var storefrontAppAfterUpdateHooks []StorefrontAppHook
var storefrontAppAfterDeleteHooks []StorefrontAppHook
var storefrontAppAfterUpsertHooks []StorefrontAppHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StorefrontApp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAppBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StorefrontApp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAppBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StorefrontApp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAppBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StorefrontApp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAppBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StorefrontApp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAppAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StorefrontApp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAppAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StorefrontApp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAppAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StorefrontApp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAppAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StorefrontApp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storefrontAppAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStorefrontAppHook registers your hook function for all future operations.
func AddStorefrontAppHook(hookPoint boil.HookPoint, storefrontAppHook StorefrontAppHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		storefrontAppBeforeInsertHooks = append(storefrontAppBeforeInsertHooks, storefrontAppHook)
	case boil.BeforeUpdateHook:
		storefrontAppBeforeUpdateHooks = append(storefrontAppBeforeUpdateHooks, storefrontAppHook)
	case boil.BeforeDeleteHook:
		storefrontAppBeforeDeleteHooks = append(storefrontAppBeforeDeleteHooks, storefrontAppHook)
	case boil.BeforeUpsertHook:
		storefrontAppBeforeUpsertHooks = append(storefrontAppBeforeUpsertHooks, storefrontAppHook)
	case boil.AfterInsertHook:
		storefrontAppAfterInsertHooks = append(storefrontAppAfterInsertHooks, storefrontAppHook)
	case boil.AfterSelectHook:
		storefrontAppAfterSelectHooks = append(storefrontAppAfterSelectHooks, storefrontAppHook)
	case boil.AfterUpdateHook:
		storefrontAppAfterUpdateHooks = append(storefrontAppAfterUpdateHooks, storefrontAppHook)
	case boil.AfterDeleteHook:
		storefrontAppAfterDeleteHooks = append(storefrontAppAfterDeleteHooks, storefrontAppHook)
	case boil.AfterUpsertHook:
		storefrontAppAfterUpsertHooks = append(storefrontAppAfterUpsertHooks, storefrontAppHook)
	}
}

// One returns a single storefrontApp record from the query.
func (q storefrontAppQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StorefrontApp, error) {
	o := &StorefrontApp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for storefront_apps")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StorefrontApp records from the query.
func (q storefrontAppQuery) All(ctx context.Context, exec boil.ContextExecutor) (StorefrontAppSlice, error) {
	var o []*StorefrontApp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StorefrontApp slice")
	}

	if len(storefrontAppAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StorefrontApp records in the query.
func (q storefrontAppQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count storefront_apps rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storefrontAppQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if storefront_apps exists")
	}

	return count > 0, nil
}

// Storefront pointed to by the foreign key.
func (o *StorefrontApp) Storefront(mods ...qm.QueryMod) storefrontQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StorefrontID),
	}

	queryMods = append(queryMods, mods...)

	query := Storefronts(queryMods...)
	queries.SetFrom(query.Query, "\"storefronts\"")

	return query
}

// LoadStorefront allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storefrontAppL) LoadStorefront(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStorefrontApp interface{}, mods queries.Applicator) error {
	var slice []*StorefrontApp
	var object *StorefrontApp

	if singular {
		object = maybeStorefrontApp.(*StorefrontApp)
	} else {
		slice = *maybeStorefrontApp.(*[]*StorefrontApp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storefrontAppR{}
		}
		args = append(args, object.StorefrontID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storefrontAppR{}
			}

			for _, a := range args {
				if a == obj.StorefrontID {
					continue Outer
				}
			}

			args = append(args, obj.StorefrontID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`storefronts`), qm.WhereIn(`storefronts.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Storefront")
	}

	var resultSlice []*Storefront
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Storefront")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for storefronts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for storefronts")
	}

	if len(storefrontAppAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Storefront = foreign
		if foreign.R == nil {
			foreign.R = &storefrontR{}
		}
		foreign.R.StorefrontApps = append(foreign.R.StorefrontApps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StorefrontID == foreign.ID {
				local.R.Storefront = foreign
				if foreign.R == nil {
					foreign.R = &storefrontR{}
				}
				foreign.R.StorefrontApps = append(foreign.R.StorefrontApps, local)
				break
			}
		}
	}

	return nil
}

// SetStorefront of the storefrontApp to the related item.
// Sets o.R.Storefront to related.
// Adds o to related.R.StorefrontApps.
func (o *StorefrontApp) SetStorefront(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Storefront) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"storefront_apps\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"storefront_id"}),
		strmangle.WhereClause("\"", "\"", 2, storefrontAppPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StorefrontID = related.ID
	if o.R == nil {
		o.R = &storefrontAppR{
			Storefront: related,
		}
	} else {
		o.R.Storefront = related
	}

	if related.R == nil {
		related.R = &storefrontR{
			StorefrontApps: StorefrontAppSlice{o},
		}
	} else {
		related.R.StorefrontApps = append(related.R.StorefrontApps, o)
	}

	return nil
}

// StorefrontApps retrieves all the records using an executor.
func StorefrontApps(mods ...qm.QueryMod) storefrontAppQuery {
	mods = append(mods, qm.From("\"storefront_apps\""))
	return storefrontAppQuery{NewQuery(mods...)}
}

// FindStorefrontApp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStorefrontApp(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StorefrontApp, error) {
	storefrontAppObj := &StorefrontApp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"storefront_apps\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, storefrontAppObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from storefront_apps")
	}

	return storefrontAppObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StorefrontApp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no storefront_apps provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storefrontAppColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storefrontAppInsertCacheMut.RLock()
	cache, cached := storefrontAppInsertCache[key]
	storefrontAppInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storefrontAppAllColumns,
			storefrontAppColumnsWithDefault,
			storefrontAppColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storefrontAppType, storefrontAppMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storefrontAppType, storefrontAppMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"storefront_apps\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"storefront_apps\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into storefront_apps")
	}

	if !cached {
		storefrontAppInsertCacheMut.Lock()
		storefrontAppInsertCache[key] = cache
		storefrontAppInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StorefrontApp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StorefrontApp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storefrontAppUpdateCacheMut.RLock()
	cache, cached := storefrontAppUpdateCache[key]
	storefrontAppUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storefrontAppAllColumns,
			storefrontAppPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update storefront_apps, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"storefront_apps\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storefrontAppPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storefrontAppType, storefrontAppMapping, append(wl, storefrontAppPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update storefront_apps row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for storefront_apps")
	}

	if !cached {
		storefrontAppUpdateCacheMut.Lock()
		storefrontAppUpdateCache[key] = cache
		storefrontAppUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storefrontAppQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for storefront_apps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for storefront_apps")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StorefrontAppSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontAppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"storefront_apps\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storefrontAppPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in storefrontApp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all storefrontApp")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StorefrontApp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no storefront_apps provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storefrontAppColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storefrontAppUpsertCacheMut.RLock()
	cache, cached := storefrontAppUpsertCache[key]
	storefrontAppUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storefrontAppAllColumns,
			storefrontAppColumnsWithDefault,
			storefrontAppColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			storefrontAppAllColumns,
			storefrontAppPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert storefront_apps, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storefrontAppPrimaryKeyColumns))
			copy(conflict, storefrontAppPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"storefront_apps\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storefrontAppType, storefrontAppMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storefrontAppType, storefrontAppMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert storefront_apps")
	}

	if !cached {
		storefrontAppUpsertCacheMut.Lock()
		storefrontAppUpsertCache[key] = cache
		storefrontAppUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StorefrontApp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StorefrontApp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StorefrontApp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storefrontAppPrimaryKeyMapping)
	sql := "DELETE FROM \"storefront_apps\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from storefront_apps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for storefront_apps")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storefrontAppQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no storefrontAppQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storefront_apps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for storefront_apps")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StorefrontAppSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storefrontAppBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontAppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"storefront_apps\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storefrontAppPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storefrontApp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for storefront_apps")
	}

	if len(storefrontAppAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StorefrontApp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStorefrontApp(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StorefrontAppSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StorefrontAppSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontAppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"storefront_apps\".* FROM \"storefront_apps\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storefrontAppPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StorefrontAppSlice")
	}

	*o = slice

	return nil
}

// StorefrontAppExists checks if the StorefrontApp row exists.
func StorefrontAppExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"storefront_apps\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if storefront_apps exists")
	}

	return exists, nil
}

func (o *StorefrontApp) E() *StorefrontAppE {
	return &StorefrontAppE{S: o}
}

func StorefrontAppEditor() *StorefrontAppE {
	return &StorefrontAppE{S: &StorefrontApp{}}
}

type StorefrontAppE struct {
	S       *StorefrontApp
	columns []string
}

func (e *StorefrontAppE) Insert(ctx context.Context, exec boil.ContextExecutor) error {
	return e.S.Insert(ctx, exec, boil.Whitelist(e.columns...))
}

func (e *StorefrontAppE) Update(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	return e.S.Update(ctx, exec, boil.Whitelist(e.columns...))
}

func (e *StorefrontAppE) ID(id int) *StorefrontAppE {
	e.S.ID = id
	e.columns = append(e.columns, StorefrontAppColumns.ID)
	return e
}

func (e *StorefrontAppE) StorefrontID(storefrontID int) *StorefrontAppE {
	e.S.StorefrontID = storefrontID
	e.columns = append(e.columns, StorefrontAppColumns.StorefrontID)
	return e
}

func (e *StorefrontAppE) Category(category string) *StorefrontAppE {
	e.S.Category = category
	e.columns = append(e.columns, StorefrontAppColumns.Category)
	return e
}

func (e *StorefrontAppE) Title(title string) *StorefrontAppE {
	e.S.Title = title
	e.columns = append(e.columns, StorefrontAppColumns.Title)
	return e
}

func (e *StorefrontAppE) Description(description string) *StorefrontAppE {
	e.S.Description = description
	e.columns = append(e.columns, StorefrontAppColumns.Description)
	return e
}

func (e *StorefrontAppE) Visible(visible bool) *StorefrontAppE {
	e.S.Visible = visible
	e.columns = append(e.columns, StorefrontAppColumns.Visible)
	return e
}

func (e *StorefrontAppE) ImageBody(imageBody null.Bytes) *StorefrontAppE {
	e.S.ImageBody = imageBody
	e.columns = append(e.columns, StorefrontAppColumns.ImageBody)
	return e
}

func (e *StorefrontAppE) ImageURL(imageURL string) *StorefrontAppE {
	e.S.ImageURL = imageURL
	e.columns = append(e.columns, StorefrontAppColumns.ImageURL)
	return e
}

func (e *StorefrontAppE) AppURL(appURL string) *StorefrontAppE {
	e.S.AppURL = appURL
	e.columns = append(e.columns, StorefrontAppColumns.AppURL)
	return e
}

func (e *StorefrontAppE) SortIndex(sortIndex int) *StorefrontAppE {
	e.S.SortIndex = sortIndex
	e.columns = append(e.columns, StorefrontAppColumns.SortIndex)
	return e
}

func (e *StorefrontAppE) CreatedAt(createdAt time.Time) *StorefrontAppE {
	e.S.CreatedAt = createdAt
	e.columns = append(e.columns, StorefrontAppColumns.CreatedAt)
	return e
}
